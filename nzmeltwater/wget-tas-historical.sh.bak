#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by localhost - 2024/11/11 14:10:33
# Search URL: http://localhost:8080/esg-search/wget?dataset_id=CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r4i1p1f3.Amon.tas.gn.v20190624|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r50i1p1f3.Amon.tas.gn.v20230708|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r51i1p1f3.Amon.tas.gn.v20230624|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r52i1p1f3.Amon.tas.gn.v20230620|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r53i1p1f3.Amon.tas.gn.v20230625|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r54i1p1f3.Amon.tas.gn.v20230626|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r55i1p1f3.Amon.tas.gn.v20230701|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r56i1p1f3.Amon.tas.gn.v20230623|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r57i1p1f3.Amon.tas.gn.v20230614|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r58i1p1f3.Amon.tas.gn.v20230628|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r59i1p1f3.Amon.tas.gn.v20230627|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r5i1p1f3.Amon.tas.gn.v20210315|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r60i1p1f3.Amon.tas.gn.v20230618|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r11i1p1f3.Amon.tas.gn.v20230516|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r12i1p1f3.Amon.tas.gn.v20230517|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r13i1p1f3.Amon.tas.gn.v20230519|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r14i1p1f3.Amon.tas.gn.v20230518|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r15i1p1f3.Amon.tas.gn.v20230515|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r16i1p1f3.Amon.tas.gn.v20230516|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r17i1p1f3.Amon.tas.gn.v20230517|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r18i1p1f3.Amon.tas.gn.v20230515|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r19i1p1f3.Amon.tas.gn.v20230516|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r1i1p1f3.Amon.tas.gn.v20190624|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r20i1p1f3.Amon.tas.gn.v20230519|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r21i1p1f3.Amon.tas.gn.v20230630|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r22i1p1f3.Amon.tas.gn.v20230626|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r23i1p1f3.Amon.tas.gn.v20230625|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r24i1p1f3.Amon.tas.gn.v20230704|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r25i1p1f3.Amon.tas.gn.v20230630|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r26i1p1f3.Amon.tas.gn.v20230711|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r27i1p1f3.Amon.tas.gn.v20230617|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r28i1p1f3.Amon.tas.gn.v20230622|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r29i1p1f3.Amon.tas.gn.v20230703|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r2i1p1f3.Amon.tas.gn.v20190624|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r30i1p1f3.Amon.tas.gn.v20230617|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r31i1p1f3.Amon.tas.gn.v20230617|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r32i1p1f3.Amon.tas.gn.v20230628|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r33i1p1f3.Amon.tas.gn.v20230627|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r34i1p1f3.Amon.tas.gn.v20230710|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r35i1p1f3.Amon.tas.gn.v20230626|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r36i1p1f3.Amon.tas.gn.v20230616|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r37i1p1f3.Amon.tas.gn.v20230630|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r38i1p1f3.Amon.tas.gn.v20230613|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r39i1p1f3.Amon.tas.gn.v20230706|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r3i1p1f3.Amon.tas.gn.v20190626|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r40i1p1f3.Amon.tas.gn.v20230707|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r41i1p1f3.Amon.tas.gn.v20230704|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r42i1p1f3.Amon.tas.gn.v20230619|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r43i1p1f3.Amon.tas.gn.v20230629|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r44i1p1f3.Amon.tas.gn.v20230629|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r45i1p1f3.Amon.tas.gn.v20230706|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r46i1p1f3.Amon.tas.gn.v20230620|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r47i1p1f3.Amon.tas.gn.v20230707|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r48i1p1f3.Amon.tas.gn.v20230622|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r49i1p1f3.Amon.tas.gn.v20230620|esgf.ceda.ac.uk
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='http://localhost:8080/esg-search/wget?dataset_id=CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r4i1p1f3.Amon.tas.gn.v20190624|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r50i1p1f3.Amon.tas.gn.v20230708|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r51i1p1f3.Amon.tas.gn.v20230624|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r52i1p1f3.Amon.tas.gn.v20230620|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r53i1p1f3.Amon.tas.gn.v20230625|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r54i1p1f3.Amon.tas.gn.v20230626|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r55i1p1f3.Amon.tas.gn.v20230701|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r56i1p1f3.Amon.tas.gn.v20230623|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r57i1p1f3.Amon.tas.gn.v20230614|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r58i1p1f3.Amon.tas.gn.v20230628|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r59i1p1f3.Amon.tas.gn.v20230627|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r5i1p1f3.Amon.tas.gn.v20210315|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r60i1p1f3.Amon.tas.gn.v20230618|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r11i1p1f3.Amon.tas.gn.v20230516|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r12i1p1f3.Amon.tas.gn.v20230517|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r13i1p1f3.Amon.tas.gn.v20230519|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r14i1p1f3.Amon.tas.gn.v20230518|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r15i1p1f3.Amon.tas.gn.v20230515|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r16i1p1f3.Amon.tas.gn.v20230516|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r17i1p1f3.Amon.tas.gn.v20230517|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r18i1p1f3.Amon.tas.gn.v20230515|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r19i1p1f3.Amon.tas.gn.v20230516|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r1i1p1f3.Amon.tas.gn.v20190624|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r20i1p1f3.Amon.tas.gn.v20230519|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r21i1p1f3.Amon.tas.gn.v20230630|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r22i1p1f3.Amon.tas.gn.v20230626|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r23i1p1f3.Amon.tas.gn.v20230625|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r24i1p1f3.Amon.tas.gn.v20230704|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r25i1p1f3.Amon.tas.gn.v20230630|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r26i1p1f3.Amon.tas.gn.v20230711|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r27i1p1f3.Amon.tas.gn.v20230617|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r28i1p1f3.Amon.tas.gn.v20230622|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r29i1p1f3.Amon.tas.gn.v20230703|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r2i1p1f3.Amon.tas.gn.v20190624|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r30i1p1f3.Amon.tas.gn.v20230617|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r31i1p1f3.Amon.tas.gn.v20230617|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r32i1p1f3.Amon.tas.gn.v20230628|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r33i1p1f3.Amon.tas.gn.v20230627|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r34i1p1f3.Amon.tas.gn.v20230710|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r35i1p1f3.Amon.tas.gn.v20230626|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r36i1p1f3.Amon.tas.gn.v20230616|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r37i1p1f3.Amon.tas.gn.v20230630|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r38i1p1f3.Amon.tas.gn.v20230613|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r39i1p1f3.Amon.tas.gn.v20230706|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r3i1p1f3.Amon.tas.gn.v20190626|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r40i1p1f3.Amon.tas.gn.v20230707|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r41i1p1f3.Amon.tas.gn.v20230704|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r42i1p1f3.Amon.tas.gn.v20230619|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r43i1p1f3.Amon.tas.gn.v20230629|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r44i1p1f3.Amon.tas.gn.v20230629|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r45i1p1f3.Amon.tas.gn.v20230706|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r46i1p1f3.Amon.tas.gn.v20230620|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r47i1p1f3.Amon.tas.gn.v20230707|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r48i1p1f3.Amon.tas.gn.v20230622|esgf.ceda.ac.uk,CMIP6.CMIP.MOHC.HadGEM3-GC31-LL.historical.r49i1p1f3.Amon.tas.gn.v20230620|esgf.ceda.ac.uk'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'tas_Amon_HadGEM3-GC31-LL_historical_r11i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r11i1p1f3/Amon/tas/gn/v20230516/tas_Amon_HadGEM3-GC31-LL_historical_r11i1p1f3_gn_185001-194912.nc' 'SHA256' '97fc1e1caac465f428cf1fc88549904cd0bf24d27c2f9d67b69aee7f16cd5405'
'tas_Amon_HadGEM3-GC31-LL_historical_r11i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r11i1p1f3/Amon/tas/gn/v20230516/tas_Amon_HadGEM3-GC31-LL_historical_r11i1p1f3_gn_195001-201412.nc' 'SHA256' '76f191ee5487b25b3684b7181d6d2d84140845781968e156ca1cd2d2935306a7'
'tas_Amon_HadGEM3-GC31-LL_historical_r12i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r12i1p1f3/Amon/tas/gn/v20230517/tas_Amon_HadGEM3-GC31-LL_historical_r12i1p1f3_gn_185001-194912.nc' 'SHA256' 'fc4c58909a0ae2fd4e1f7ed387fbd75ee97c7c9e91c0d51c00ce59b6df8ee3e5'
'tas_Amon_HadGEM3-GC31-LL_historical_r12i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r12i1p1f3/Amon/tas/gn/v20230517/tas_Amon_HadGEM3-GC31-LL_historical_r12i1p1f3_gn_195001-201412.nc' 'SHA256' 'a5c4d2a95baa42b280d0bae11aec883a492218f0b059835e3a046a5259452d1e'
'tas_Amon_HadGEM3-GC31-LL_historical_r13i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r13i1p1f3/Amon/tas/gn/v20230519/tas_Amon_HadGEM3-GC31-LL_historical_r13i1p1f3_gn_185001-194912.nc' 'SHA256' 'c519616cb07f07016a3db0e8dcffd66494e9ee272a2700f8e65c0c2251cd5c5d'
'tas_Amon_HadGEM3-GC31-LL_historical_r13i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r13i1p1f3/Amon/tas/gn/v20230519/tas_Amon_HadGEM3-GC31-LL_historical_r13i1p1f3_gn_195001-201412.nc' 'SHA256' '1a742a14e76f131283e2707c6cfb10aea0a7617d545c0e31c99841b2209c41be'
'tas_Amon_HadGEM3-GC31-LL_historical_r14i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r14i1p1f3/Amon/tas/gn/v20230518/tas_Amon_HadGEM3-GC31-LL_historical_r14i1p1f3_gn_185001-194912.nc' 'SHA256' '7e808da49216e6cdcfcc1d504a17e8dc9b80633516d639969c2b339ac24dfd07'
'tas_Amon_HadGEM3-GC31-LL_historical_r14i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r14i1p1f3/Amon/tas/gn/v20230518/tas_Amon_HadGEM3-GC31-LL_historical_r14i1p1f3_gn_195001-201412.nc' 'SHA256' '929cee0f857e4cacc54953af3a6087ef433cd56a68f841b6cabef9b4dd7588fc'
'tas_Amon_HadGEM3-GC31-LL_historical_r15i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r15i1p1f3/Amon/tas/gn/v20230515/tas_Amon_HadGEM3-GC31-LL_historical_r15i1p1f3_gn_185001-194912.nc' 'SHA256' 'b06f2a245d241bb7b878cae29c2b638f44b29d6238e9bda518e8ea164fcf1579'
'tas_Amon_HadGEM3-GC31-LL_historical_r15i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r15i1p1f3/Amon/tas/gn/v20230515/tas_Amon_HadGEM3-GC31-LL_historical_r15i1p1f3_gn_195001-201412.nc' 'SHA256' '407fbb4af82fefe13ad1a532c53fce785173ecca20041347318154503916fd12'
'tas_Amon_HadGEM3-GC31-LL_historical_r16i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r16i1p1f3/Amon/tas/gn/v20230516/tas_Amon_HadGEM3-GC31-LL_historical_r16i1p1f3_gn_185001-194912.nc' 'SHA256' '3ea3aed92e77838dcf30edb87d653523e6366e270bdc3eab0f7642098702305d'
'tas_Amon_HadGEM3-GC31-LL_historical_r16i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r16i1p1f3/Amon/tas/gn/v20230516/tas_Amon_HadGEM3-GC31-LL_historical_r16i1p1f3_gn_195001-201412.nc' 'SHA256' 'cae8bde25f350e17c10a9453277c4c31d1ebde7686701f085af720c3715fafab'
'tas_Amon_HadGEM3-GC31-LL_historical_r17i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r17i1p1f3/Amon/tas/gn/v20230517/tas_Amon_HadGEM3-GC31-LL_historical_r17i1p1f3_gn_185001-194912.nc' 'SHA256' '466e4599e698e4314d75f4d48da6cfec456b72da3f48fcc143c4044eebefccae'
'tas_Amon_HadGEM3-GC31-LL_historical_r17i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r17i1p1f3/Amon/tas/gn/v20230517/tas_Amon_HadGEM3-GC31-LL_historical_r17i1p1f3_gn_195001-201412.nc' 'SHA256' '261aefa3092a23a123710edd520885ebc8bd43facf72b77a54e2875dc9dbc800'
'tas_Amon_HadGEM3-GC31-LL_historical_r18i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r18i1p1f3/Amon/tas/gn/v20230515/tas_Amon_HadGEM3-GC31-LL_historical_r18i1p1f3_gn_185001-194912.nc' 'SHA256' 'f6a096dc61a4b0acdd1ad94032b97dd2ef6a76801f13aa922a4634bd6831d9d4'
'tas_Amon_HadGEM3-GC31-LL_historical_r18i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r18i1p1f3/Amon/tas/gn/v20230515/tas_Amon_HadGEM3-GC31-LL_historical_r18i1p1f3_gn_195001-201412.nc' 'SHA256' 'd33d8356d5de97a6a3dcdee9b0f37fd5c206469c1a15ef227986b2a1b9fc8f87'
'tas_Amon_HadGEM3-GC31-LL_historical_r19i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r19i1p1f3/Amon/tas/gn/v20230516/tas_Amon_HadGEM3-GC31-LL_historical_r19i1p1f3_gn_185001-194912.nc' 'SHA256' 'f477e8deab6740f2b4e6121baacf23ec5bfba01741fbeef5bc917454671b6c1b'
'tas_Amon_HadGEM3-GC31-LL_historical_r19i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r19i1p1f3/Amon/tas/gn/v20230516/tas_Amon_HadGEM3-GC31-LL_historical_r19i1p1f3_gn_195001-201412.nc' 'SHA256' 'f8f6bd06b280927f9c6683afbfd8dcf79ea765ad6f3f07cc34872695394e4cb9'
'tas_Amon_HadGEM3-GC31-LL_historical_r1i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r1i1p1f3/Amon/tas/gn/v20190624/tas_Amon_HadGEM3-GC31-LL_historical_r1i1p1f3_gn_185001-194912.nc' 'SHA256' '60bb1107413bb61229c5c04945760f3996648f0c8cf00665e4c03e0f894be199'
'tas_Amon_HadGEM3-GC31-LL_historical_r1i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r1i1p1f3/Amon/tas/gn/v20190624/tas_Amon_HadGEM3-GC31-LL_historical_r1i1p1f3_gn_195001-201412.nc' 'SHA256' 'ea64ffade501fd4b8f93f8ee16ed2f8620af4df1502f525f3c6a7bd8ee0c789d'
'tas_Amon_HadGEM3-GC31-LL_historical_r20i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r20i1p1f3/Amon/tas/gn/v20230519/tas_Amon_HadGEM3-GC31-LL_historical_r20i1p1f3_gn_185001-194912.nc' 'SHA256' '1c2c4810eddc2b705955d740e5ff2470a654aab4535f2b1993a950b60e05ee7c'
'tas_Amon_HadGEM3-GC31-LL_historical_r20i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r20i1p1f3/Amon/tas/gn/v20230519/tas_Amon_HadGEM3-GC31-LL_historical_r20i1p1f3_gn_195001-201412.nc' 'SHA256' '773b4e30d1676948a7a8e1a0b3157bdb51dfe2273b6bf79d877f7ac5f510ad0d'
'tas_Amon_HadGEM3-GC31-LL_historical_r21i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r21i1p1f3/Amon/tas/gn/v20230630/tas_Amon_HadGEM3-GC31-LL_historical_r21i1p1f3_gn_185001-194912.nc' 'SHA256' 'feda42dade026e5e2de99874fce725d876056140fe426d37291b9b24cbd7af09'
'tas_Amon_HadGEM3-GC31-LL_historical_r21i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r21i1p1f3/Amon/tas/gn/v20230630/tas_Amon_HadGEM3-GC31-LL_historical_r21i1p1f3_gn_195001-201412.nc' 'SHA256' 'fe55ee28540f44a5647ab6aeaa0bd0c35cf8587652c9688dd18f8c0a44fde116'
'tas_Amon_HadGEM3-GC31-LL_historical_r22i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r22i1p1f3/Amon/tas/gn/v20230626/tas_Amon_HadGEM3-GC31-LL_historical_r22i1p1f3_gn_185001-194912.nc' 'SHA256' '7a3dd4f4fa6ca6896b40c1c6ce0661a2ecd8258f0f3dbe5cd70cdf93423d3d1e'
'tas_Amon_HadGEM3-GC31-LL_historical_r22i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r22i1p1f3/Amon/tas/gn/v20230626/tas_Amon_HadGEM3-GC31-LL_historical_r22i1p1f3_gn_195001-201412.nc' 'SHA256' '1dd2492532a0672165b03ce7b54e3069decd091fa6e5e1c367d82c4e5921bc4b'
'tas_Amon_HadGEM3-GC31-LL_historical_r23i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r23i1p1f3/Amon/tas/gn/v20230625/tas_Amon_HadGEM3-GC31-LL_historical_r23i1p1f3_gn_185001-194912.nc' 'SHA256' '3285d7c642e29ab96153348557fe8333152ddc7e5801c4357ce359af7bba2a93'
'tas_Amon_HadGEM3-GC31-LL_historical_r23i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r23i1p1f3/Amon/tas/gn/v20230625/tas_Amon_HadGEM3-GC31-LL_historical_r23i1p1f3_gn_195001-201412.nc' 'SHA256' '17cffcd0b7ee3ba0589b845129027ee3dbe45d705cf002e3e8f3a26e9bb29a07'
'tas_Amon_HadGEM3-GC31-LL_historical_r24i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r24i1p1f3/Amon/tas/gn/v20230704/tas_Amon_HadGEM3-GC31-LL_historical_r24i1p1f3_gn_185001-194912.nc' 'SHA256' 'c61b13596cb635ecd25effb0ebc65f2c633725dec7efbf63caaeb8a103ed0efb'
'tas_Amon_HadGEM3-GC31-LL_historical_r24i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r24i1p1f3/Amon/tas/gn/v20230704/tas_Amon_HadGEM3-GC31-LL_historical_r24i1p1f3_gn_195001-201412.nc' 'SHA256' '82623155515b7539d74ffa048c4ff4aaecccad4a54d223755fe2bb0745c58053'
'tas_Amon_HadGEM3-GC31-LL_historical_r25i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r25i1p1f3/Amon/tas/gn/v20230630/tas_Amon_HadGEM3-GC31-LL_historical_r25i1p1f3_gn_185001-194912.nc' 'SHA256' '66c88d145fbb2aa209a66fe7be5a208d974372fdec742f1f08bb6c3a707a6afd'
'tas_Amon_HadGEM3-GC31-LL_historical_r25i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r25i1p1f3/Amon/tas/gn/v20230630/tas_Amon_HadGEM3-GC31-LL_historical_r25i1p1f3_gn_195001-201412.nc' 'SHA256' 'a0e0a63a03d1448146567bc709c19b72d6ad290a4777ce96fbd4178246446f38'
'tas_Amon_HadGEM3-GC31-LL_historical_r26i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r26i1p1f3/Amon/tas/gn/v20230711/tas_Amon_HadGEM3-GC31-LL_historical_r26i1p1f3_gn_185001-194912.nc' 'SHA256' '2f8f8cabbb8938703955a0fb5062e515950a7484e2b537f4d8d5aa4feae48a6c'
'tas_Amon_HadGEM3-GC31-LL_historical_r26i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r26i1p1f3/Amon/tas/gn/v20230711/tas_Amon_HadGEM3-GC31-LL_historical_r26i1p1f3_gn_195001-201412.nc' 'SHA256' '21ea7af42b63b2f201076e1c56051e5489d3d083002ac0d2d3cb69a7869124d6'
'tas_Amon_HadGEM3-GC31-LL_historical_r27i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r27i1p1f3/Amon/tas/gn/v20230617/tas_Amon_HadGEM3-GC31-LL_historical_r27i1p1f3_gn_185001-194912.nc' 'SHA256' '9cd0970c08527db4a7eede2be662e25861ced4991f1b2e0c7d11e77ef102986a'
'tas_Amon_HadGEM3-GC31-LL_historical_r27i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r27i1p1f3/Amon/tas/gn/v20230617/tas_Amon_HadGEM3-GC31-LL_historical_r27i1p1f3_gn_195001-201412.nc' 'SHA256' 'f4a9af773798751ab5349b9731fb92d623f2cbe18c869b57953cbd940954da76'
'tas_Amon_HadGEM3-GC31-LL_historical_r28i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r28i1p1f3/Amon/tas/gn/v20230622/tas_Amon_HadGEM3-GC31-LL_historical_r28i1p1f3_gn_185001-194912.nc' 'SHA256' 'b75daa52b0fea83d992fbcb83e3cec456236673da81a994edd439a84592293b0'
'tas_Amon_HadGEM3-GC31-LL_historical_r28i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r28i1p1f3/Amon/tas/gn/v20230622/tas_Amon_HadGEM3-GC31-LL_historical_r28i1p1f3_gn_195001-201412.nc' 'SHA256' '694bb8019669b972241139cdf9041343c4be5d414b729997a94b0a6a426c19e2'
'tas_Amon_HadGEM3-GC31-LL_historical_r29i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r29i1p1f3/Amon/tas/gn/v20230703/tas_Amon_HadGEM3-GC31-LL_historical_r29i1p1f3_gn_185001-194912.nc' 'SHA256' 'bbe35a29a952868dd3c4d3926fa0689a185b013061d64fba4bbdab86d399ded8'
'tas_Amon_HadGEM3-GC31-LL_historical_r29i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r29i1p1f3/Amon/tas/gn/v20230703/tas_Amon_HadGEM3-GC31-LL_historical_r29i1p1f3_gn_195001-201412.nc' 'SHA256' '465bc2cc55bb85e5bcd14d05624ac6d77b04f34d95dab2224be9aed26e458a16'
'tas_Amon_HadGEM3-GC31-LL_historical_r2i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r2i1p1f3/Amon/tas/gn/v20190624/tas_Amon_HadGEM3-GC31-LL_historical_r2i1p1f3_gn_185001-194912.nc' 'SHA256' '6e4e0580872eb2d5d03e1153ee1a791a239164c7ccbe66fabf701798107aa97a'
'tas_Amon_HadGEM3-GC31-LL_historical_r2i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r2i1p1f3/Amon/tas/gn/v20190624/tas_Amon_HadGEM3-GC31-LL_historical_r2i1p1f3_gn_195001-201412.nc' 'SHA256' 'e5dc3028596994250e9de32f9fbd4e5574eddf7b735794781dc5dec59c4d95f9'
'tas_Amon_HadGEM3-GC31-LL_historical_r30i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r30i1p1f3/Amon/tas/gn/v20230617/tas_Amon_HadGEM3-GC31-LL_historical_r30i1p1f3_gn_185001-194912.nc' 'SHA256' '10018b9277ca7e189a60e8ddccc7ace137d0ef891b47e09d34b7f180199713d2'
'tas_Amon_HadGEM3-GC31-LL_historical_r30i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r30i1p1f3/Amon/tas/gn/v20230617/tas_Amon_HadGEM3-GC31-LL_historical_r30i1p1f3_gn_195001-201412.nc' 'SHA256' 'd8c63927dfa9382dd7e305665737bbb31084e811e93ee2fbeb4a493fae151656'
'tas_Amon_HadGEM3-GC31-LL_historical_r31i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r31i1p1f3/Amon/tas/gn/v20230617/tas_Amon_HadGEM3-GC31-LL_historical_r31i1p1f3_gn_185001-194912.nc' 'SHA256' '33c28fd4e2e62049939c2d4a165c8857e509d1acfac790a9ea60fb4e4bb40f74'
'tas_Amon_HadGEM3-GC31-LL_historical_r31i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r31i1p1f3/Amon/tas/gn/v20230617/tas_Amon_HadGEM3-GC31-LL_historical_r31i1p1f3_gn_195001-201412.nc' 'SHA256' '6c3a5f9d6395348995ad0c598fbd55bc1023c765dcf12fc6ab8fdcae802f70ca'
'tas_Amon_HadGEM3-GC31-LL_historical_r32i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r32i1p1f3/Amon/tas/gn/v20230628/tas_Amon_HadGEM3-GC31-LL_historical_r32i1p1f3_gn_185001-194912.nc' 'SHA256' 'b79bf37eced1009dd372d4fe7031911107bfb9d919eb8d9150ce07795b9c0786'
'tas_Amon_HadGEM3-GC31-LL_historical_r32i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r32i1p1f3/Amon/tas/gn/v20230628/tas_Amon_HadGEM3-GC31-LL_historical_r32i1p1f3_gn_195001-201412.nc' 'SHA256' 'b7527a3f339422ed7116f98c87d0b09ec7dfed4b4fc2c62ba6cbd17f2c8d45ce'
'tas_Amon_HadGEM3-GC31-LL_historical_r33i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r33i1p1f3/Amon/tas/gn/v20230627/tas_Amon_HadGEM3-GC31-LL_historical_r33i1p1f3_gn_185001-194912.nc' 'SHA256' '64722fba799b852339351399326d1e4ff49567515ac7571af1374565227b767f'
'tas_Amon_HadGEM3-GC31-LL_historical_r33i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r33i1p1f3/Amon/tas/gn/v20230627/tas_Amon_HadGEM3-GC31-LL_historical_r33i1p1f3_gn_195001-201412.nc' 'SHA256' 'd071f998f52df3d979d26b7f76d28c7047d1927f682b9a1a6e83c4dde8bf212d'
'tas_Amon_HadGEM3-GC31-LL_historical_r34i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r34i1p1f3/Amon/tas/gn/v20230710/tas_Amon_HadGEM3-GC31-LL_historical_r34i1p1f3_gn_185001-194912.nc' 'SHA256' 'f7b87565865297d4eb13cfd3178e52bc4a494e2e51e7fd204d6c11df811c1e4e'
'tas_Amon_HadGEM3-GC31-LL_historical_r34i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r34i1p1f3/Amon/tas/gn/v20230710/tas_Amon_HadGEM3-GC31-LL_historical_r34i1p1f3_gn_195001-201412.nc' 'SHA256' '1f67e05f34565f6be5ab259e616b40c905d52e8968f0dd4f178906969424f86d'
'tas_Amon_HadGEM3-GC31-LL_historical_r35i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r35i1p1f3/Amon/tas/gn/v20230626/tas_Amon_HadGEM3-GC31-LL_historical_r35i1p1f3_gn_185001-194912.nc' 'SHA256' 'a4b74989d1844cab4d639ef118a6cf5ba518906216fc0bc0d4fc4cc186981959'
'tas_Amon_HadGEM3-GC31-LL_historical_r35i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r35i1p1f3/Amon/tas/gn/v20230626/tas_Amon_HadGEM3-GC31-LL_historical_r35i1p1f3_gn_195001-201412.nc' 'SHA256' '680cb295b571572d554a7d9f4e28c8c2aa592e89a9988b2307675419eaa0c09c'
'tas_Amon_HadGEM3-GC31-LL_historical_r36i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r36i1p1f3/Amon/tas/gn/v20230616/tas_Amon_HadGEM3-GC31-LL_historical_r36i1p1f3_gn_185001-194912.nc' 'SHA256' '2e667d199332f0bfc8b98917f522f65e94905f9d9397252da53702b5a1595136'
'tas_Amon_HadGEM3-GC31-LL_historical_r36i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r36i1p1f3/Amon/tas/gn/v20230616/tas_Amon_HadGEM3-GC31-LL_historical_r36i1p1f3_gn_195001-201412.nc' 'SHA256' 'f53188fba7147a319d697dc2d4700cd992492155e96b8a62981b22fb3c9d6506'
'tas_Amon_HadGEM3-GC31-LL_historical_r37i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r37i1p1f3/Amon/tas/gn/v20230630/tas_Amon_HadGEM3-GC31-LL_historical_r37i1p1f3_gn_185001-194912.nc' 'SHA256' '172ffa0d89a3a7ef5b05edd3773f1a5702d27c1cedadac5d0fecfa6a6fb25af9'
'tas_Amon_HadGEM3-GC31-LL_historical_r37i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r37i1p1f3/Amon/tas/gn/v20230630/tas_Amon_HadGEM3-GC31-LL_historical_r37i1p1f3_gn_195001-201412.nc' 'SHA256' 'fadfd25408eeff2fda33dfff6e051f3312290b46f7af752cd742eda31003f08b'
'tas_Amon_HadGEM3-GC31-LL_historical_r38i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r38i1p1f3/Amon/tas/gn/v20230613/tas_Amon_HadGEM3-GC31-LL_historical_r38i1p1f3_gn_185001-194912.nc' 'SHA256' '4074239f79ddea1b901f89f07f3a19a2693454c9cab70e775bac961c3cf0b99c'
'tas_Amon_HadGEM3-GC31-LL_historical_r38i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r38i1p1f3/Amon/tas/gn/v20230613/tas_Amon_HadGEM3-GC31-LL_historical_r38i1p1f3_gn_195001-201412.nc' 'SHA256' '754e11f81e0b9ff00d7bc5a08aedd558310c880ab0c44bd885778f2f6112f11a'
'tas_Amon_HadGEM3-GC31-LL_historical_r39i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r39i1p1f3/Amon/tas/gn/v20230706/tas_Amon_HadGEM3-GC31-LL_historical_r39i1p1f3_gn_185001-194912.nc' 'SHA256' '71bd13bad974139d24a9ba712a5da39e9541378187107c917e3a25f5cf3a9a89'
'tas_Amon_HadGEM3-GC31-LL_historical_r39i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r39i1p1f3/Amon/tas/gn/v20230706/tas_Amon_HadGEM3-GC31-LL_historical_r39i1p1f3_gn_195001-201412.nc' 'SHA256' 'ea1fa24d78f21e4c8b4beefd8f6e968cc07505bd77facdeefd80d947c4578a31'
'tas_Amon_HadGEM3-GC31-LL_historical_r3i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r3i1p1f3/Amon/tas/gn/v20190626/tas_Amon_HadGEM3-GC31-LL_historical_r3i1p1f3_gn_185001-194912.nc' 'SHA256' '74bbd66118b2d4dd637df59b87998d7cfd18df28d71bbd0179758462d16dcd26'
'tas_Amon_HadGEM3-GC31-LL_historical_r3i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r3i1p1f3/Amon/tas/gn/v20190626/tas_Amon_HadGEM3-GC31-LL_historical_r3i1p1f3_gn_195001-201412.nc' 'SHA256' '51ba22f35cb5ecd2948228c32a40306534290e0dd8fb8cf2ba4c4b3d79553e79'
'tas_Amon_HadGEM3-GC31-LL_historical_r40i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r40i1p1f3/Amon/tas/gn/v20230707/tas_Amon_HadGEM3-GC31-LL_historical_r40i1p1f3_gn_185001-194912.nc' 'SHA256' 'f6a5bc86dd4dc2e4fdd00de5b99e08dd1355ebc6981fb5e11fdba326f380bbc2'
'tas_Amon_HadGEM3-GC31-LL_historical_r40i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r40i1p1f3/Amon/tas/gn/v20230707/tas_Amon_HadGEM3-GC31-LL_historical_r40i1p1f3_gn_195001-201412.nc' 'SHA256' '6211e4f602b984e7d8570d52d2187abfa7ea0730ba17a8533ba58efdebc8ec67'
'tas_Amon_HadGEM3-GC31-LL_historical_r41i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r41i1p1f3/Amon/tas/gn/v20230704/tas_Amon_HadGEM3-GC31-LL_historical_r41i1p1f3_gn_185001-194912.nc' 'SHA256' '2f3c8fb4465c50d83cd1cf36b065782b99e967b986480d39501339c254bc95a7'
'tas_Amon_HadGEM3-GC31-LL_historical_r41i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r41i1p1f3/Amon/tas/gn/v20230704/tas_Amon_HadGEM3-GC31-LL_historical_r41i1p1f3_gn_195001-201412.nc' 'SHA256' '5f3cc4b7af03c1e5d56f423b2cd8fb6a5f354d8c8998fd3c2bfa2089fd7e92fc'
'tas_Amon_HadGEM3-GC31-LL_historical_r42i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r42i1p1f3/Amon/tas/gn/v20230619/tas_Amon_HadGEM3-GC31-LL_historical_r42i1p1f3_gn_185001-194912.nc' 'SHA256' '6757785a21d75c39a240eef639762e9bc56bb144ad5d89d7ff724f40155cdb5f'
'tas_Amon_HadGEM3-GC31-LL_historical_r42i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r42i1p1f3/Amon/tas/gn/v20230619/tas_Amon_HadGEM3-GC31-LL_historical_r42i1p1f3_gn_195001-201412.nc' 'SHA256' 'dd948c5c8d93af9e60e253683b043ceb755c725e063bf3ff01cf54232d24b0da'
'tas_Amon_HadGEM3-GC31-LL_historical_r43i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r43i1p1f3/Amon/tas/gn/v20230629/tas_Amon_HadGEM3-GC31-LL_historical_r43i1p1f3_gn_185001-194912.nc' 'SHA256' 'c2f162ba6d8447d1ce8218dc0a0ef96cf7f7b0469950aab427c02ac62bb2377e'
'tas_Amon_HadGEM3-GC31-LL_historical_r43i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r43i1p1f3/Amon/tas/gn/v20230629/tas_Amon_HadGEM3-GC31-LL_historical_r43i1p1f3_gn_195001-201412.nc' 'SHA256' 'd5f3cf7935eadf63de2dbf86756d9947084f97313672b3c9a27ac7b0849ea1d5'
'tas_Amon_HadGEM3-GC31-LL_historical_r44i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r44i1p1f3/Amon/tas/gn/v20230629/tas_Amon_HadGEM3-GC31-LL_historical_r44i1p1f3_gn_185001-194912.nc' 'SHA256' '0764af46081c68584b643f4ac273878895708c8dbe820c4c55c00e2861caa472'
'tas_Amon_HadGEM3-GC31-LL_historical_r44i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r44i1p1f3/Amon/tas/gn/v20230629/tas_Amon_HadGEM3-GC31-LL_historical_r44i1p1f3_gn_195001-201412.nc' 'SHA256' '71f14d4551ba4d88dc42b308cfec0a4a057f780bb0aaa7b56c512cffc05514a5'
'tas_Amon_HadGEM3-GC31-LL_historical_r45i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r45i1p1f3/Amon/tas/gn/v20230706/tas_Amon_HadGEM3-GC31-LL_historical_r45i1p1f3_gn_185001-194912.nc' 'SHA256' '89083abfaea1d2c41d18074a8daade3c3b50c0f96acddb446db98342de90c754'
'tas_Amon_HadGEM3-GC31-LL_historical_r45i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r45i1p1f3/Amon/tas/gn/v20230706/tas_Amon_HadGEM3-GC31-LL_historical_r45i1p1f3_gn_195001-201412.nc' 'SHA256' 'bea85dec5eec5e2cd8ca998c1bc3c87509d6a8100f8e666ce541565073b80ead'
'tas_Amon_HadGEM3-GC31-LL_historical_r46i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r46i1p1f3/Amon/tas/gn/v20230620/tas_Amon_HadGEM3-GC31-LL_historical_r46i1p1f3_gn_185001-194912.nc' 'SHA256' '09c5f3269a9792afe38611b0ab2cba646ec8e8879d860242c01ca456fc312482'
'tas_Amon_HadGEM3-GC31-LL_historical_r46i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r46i1p1f3/Amon/tas/gn/v20230620/tas_Amon_HadGEM3-GC31-LL_historical_r46i1p1f3_gn_195001-201412.nc' 'SHA256' '12dd2a75d9cf2990d619bf389fd650e78d9d37fa70e3bf0efab0ff6a144189a0'
'tas_Amon_HadGEM3-GC31-LL_historical_r47i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r47i1p1f3/Amon/tas/gn/v20230707/tas_Amon_HadGEM3-GC31-LL_historical_r47i1p1f3_gn_185001-194912.nc' 'SHA256' '8b2044b8bac69eb4914a822bd0db2a9e0c8be9683f2be46784c1810b4fa62d2c'
'tas_Amon_HadGEM3-GC31-LL_historical_r47i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r47i1p1f3/Amon/tas/gn/v20230707/tas_Amon_HadGEM3-GC31-LL_historical_r47i1p1f3_gn_195001-201412.nc' 'SHA256' '67f50e6700dfd1cb865678a00863345a5107cda0fdaf6098398990031713baaa'
'tas_Amon_HadGEM3-GC31-LL_historical_r48i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r48i1p1f3/Amon/tas/gn/v20230622/tas_Amon_HadGEM3-GC31-LL_historical_r48i1p1f3_gn_185001-194912.nc' 'SHA256' '70b74d0e9e8bb3534d0a6ea0ff8ddfd0eabd35c6569cc9d0cf2c66d339b2207a'
'tas_Amon_HadGEM3-GC31-LL_historical_r48i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r48i1p1f3/Amon/tas/gn/v20230622/tas_Amon_HadGEM3-GC31-LL_historical_r48i1p1f3_gn_195001-201412.nc' 'SHA256' '80ad241eaff13bf87f6b8fb5c7ac141092bfd50511d10c380cb5a80954ac6744'
'tas_Amon_HadGEM3-GC31-LL_historical_r49i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r49i1p1f3/Amon/tas/gn/v20230620/tas_Amon_HadGEM3-GC31-LL_historical_r49i1p1f3_gn_185001-194912.nc' 'SHA256' '13d91f75bf89249963ace728011ab92d015efe9166e95860a1e04ec1fd743068'
'tas_Amon_HadGEM3-GC31-LL_historical_r49i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r49i1p1f3/Amon/tas/gn/v20230620/tas_Amon_HadGEM3-GC31-LL_historical_r49i1p1f3_gn_195001-201412.nc' 'SHA256' '47826fb6b4c665441747e4f68e8328ffde2763a340720c17ebd812fd7eb74b2a'
'tas_Amon_HadGEM3-GC31-LL_historical_r4i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r4i1p1f3/Amon/tas/gn/v20190624/tas_Amon_HadGEM3-GC31-LL_historical_r4i1p1f3_gn_185001-194912.nc' 'SHA256' '547432890a2f5dfc61d87bea605c9efe8e487f3c8fe9cf81bf7e56bfe09bbfbc'
'tas_Amon_HadGEM3-GC31-LL_historical_r4i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r4i1p1f3/Amon/tas/gn/v20190624/tas_Amon_HadGEM3-GC31-LL_historical_r4i1p1f3_gn_195001-201412.nc' 'SHA256' 'fbe2ee9716f4152e8d1616e5bf1cb7585cb52430661e2e53defc33c4807c8ee2'
'tas_Amon_HadGEM3-GC31-LL_historical_r50i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r50i1p1f3/Amon/tas/gn/v20230708/tas_Amon_HadGEM3-GC31-LL_historical_r50i1p1f3_gn_185001-194912.nc' 'SHA256' 'd4cc675dbec4f88ee65a00288aec09a650176bafa4917bcda7de290fbe8feada'
'tas_Amon_HadGEM3-GC31-LL_historical_r50i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r50i1p1f3/Amon/tas/gn/v20230708/tas_Amon_HadGEM3-GC31-LL_historical_r50i1p1f3_gn_195001-201412.nc' 'SHA256' '0606f0a2e95e0e85567f7fdc804ba3d8eb12deb040996874b91d05620950321e'
'tas_Amon_HadGEM3-GC31-LL_historical_r51i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r51i1p1f3/Amon/tas/gn/v20230624/tas_Amon_HadGEM3-GC31-LL_historical_r51i1p1f3_gn_185001-194912.nc' 'SHA256' '4d523dd9f81bba2c6b8ed9ab2ee7345f22912708e63760745ee643e6c2c77397'
'tas_Amon_HadGEM3-GC31-LL_historical_r51i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r51i1p1f3/Amon/tas/gn/v20230624/tas_Amon_HadGEM3-GC31-LL_historical_r51i1p1f3_gn_195001-201412.nc' 'SHA256' '415236af19499568e7f17d2189e019bfff3e8fcce8f1fc38e0f9ffc2c9d06929'
'tas_Amon_HadGEM3-GC31-LL_historical_r52i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r52i1p1f3/Amon/tas/gn/v20230620/tas_Amon_HadGEM3-GC31-LL_historical_r52i1p1f3_gn_185001-194912.nc' 'SHA256' '2bfc3c4793cc41d726d208f277323b01dab71cfe3b34cbb323596f86c2dec0c6'
'tas_Amon_HadGEM3-GC31-LL_historical_r52i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r52i1p1f3/Amon/tas/gn/v20230620/tas_Amon_HadGEM3-GC31-LL_historical_r52i1p1f3_gn_195001-201412.nc' 'SHA256' '1df61e769558300af0a73a524cd6276c853ad74ae03571293d82139dee96cd99'
'tas_Amon_HadGEM3-GC31-LL_historical_r53i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r53i1p1f3/Amon/tas/gn/v20230625/tas_Amon_HadGEM3-GC31-LL_historical_r53i1p1f3_gn_185001-194912.nc' 'SHA256' '04fae3d67e79db14895b4d1a05d02058863c0c69844c18316d4ecd0fb6f42ad9'
'tas_Amon_HadGEM3-GC31-LL_historical_r53i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r53i1p1f3/Amon/tas/gn/v20230625/tas_Amon_HadGEM3-GC31-LL_historical_r53i1p1f3_gn_195001-201412.nc' 'SHA256' '6da7d87467003dac12e3a9df7d4ae7260f8257b27662d8bb1f723068fbd9124b'
'tas_Amon_HadGEM3-GC31-LL_historical_r54i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r54i1p1f3/Amon/tas/gn/v20230626/tas_Amon_HadGEM3-GC31-LL_historical_r54i1p1f3_gn_185001-194912.nc' 'SHA256' '861f8cfa8aabb2ccb02a0923af589d2ead50c2719fcb5a49e26148d4211544e6'
'tas_Amon_HadGEM3-GC31-LL_historical_r54i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r54i1p1f3/Amon/tas/gn/v20230626/tas_Amon_HadGEM3-GC31-LL_historical_r54i1p1f3_gn_195001-201412.nc' 'SHA256' '60b170c3fe8c17aaa4b47eaca5c2b745c62d9055669fce7ca9ebfc3a33a5cff8'
'tas_Amon_HadGEM3-GC31-LL_historical_r55i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r55i1p1f3/Amon/tas/gn/v20230701/tas_Amon_HadGEM3-GC31-LL_historical_r55i1p1f3_gn_185001-194912.nc' 'SHA256' '19f6eb94de72fbf55f01918e7496abcaf1dde87801f7df3481a5a194ea37fca7'
'tas_Amon_HadGEM3-GC31-LL_historical_r55i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r55i1p1f3/Amon/tas/gn/v20230701/tas_Amon_HadGEM3-GC31-LL_historical_r55i1p1f3_gn_195001-201412.nc' 'SHA256' '793bbb28c36648015d90d09dc7f8a5d55554848b93fcf8a39a29420df5dee694'
'tas_Amon_HadGEM3-GC31-LL_historical_r56i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r56i1p1f3/Amon/tas/gn/v20230623/tas_Amon_HadGEM3-GC31-LL_historical_r56i1p1f3_gn_185001-194912.nc' 'SHA256' '989f595e5307b8e824d923ff0249b4c60336fd4e261ce223b3473c3dd29f4e5f'
'tas_Amon_HadGEM3-GC31-LL_historical_r56i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r56i1p1f3/Amon/tas/gn/v20230623/tas_Amon_HadGEM3-GC31-LL_historical_r56i1p1f3_gn_195001-201412.nc' 'SHA256' '31bb199952d0fc9838ff75a1b127b3e2ab763355c07025999598f2627b973932'
'tas_Amon_HadGEM3-GC31-LL_historical_r57i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r57i1p1f3/Amon/tas/gn/v20230614/tas_Amon_HadGEM3-GC31-LL_historical_r57i1p1f3_gn_185001-194912.nc' 'SHA256' '19a0d41c71e49ee264abc87a21cce518c9fe5b96c19ed72e825f07c578dff59f'
'tas_Amon_HadGEM3-GC31-LL_historical_r57i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r57i1p1f3/Amon/tas/gn/v20230614/tas_Amon_HadGEM3-GC31-LL_historical_r57i1p1f3_gn_195001-201412.nc' 'SHA256' 'e0946849db8e20447c7f1f52b08200212f073329970f2f757b64c5c4efe1de01'
'tas_Amon_HadGEM3-GC31-LL_historical_r58i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r58i1p1f3/Amon/tas/gn/v20230628/tas_Amon_HadGEM3-GC31-LL_historical_r58i1p1f3_gn_185001-194912.nc' 'SHA256' '46f2889336f4dee3b519296964dc7fff600f6806e011a2510d4d4d0fa3a064f2'
'tas_Amon_HadGEM3-GC31-LL_historical_r58i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r58i1p1f3/Amon/tas/gn/v20230628/tas_Amon_HadGEM3-GC31-LL_historical_r58i1p1f3_gn_195001-201412.nc' 'SHA256' '980de2734a295e48d4b731cd20f2fda387b9a5583935c731b55852441fa437c7'
'tas_Amon_HadGEM3-GC31-LL_historical_r59i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r59i1p1f3/Amon/tas/gn/v20230627/tas_Amon_HadGEM3-GC31-LL_historical_r59i1p1f3_gn_185001-194912.nc' 'SHA256' 'f3f81838c35202187ad87af23d41b19ad6fbbdc361a97e12d6378cf88f571cf9'
'tas_Amon_HadGEM3-GC31-LL_historical_r59i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r59i1p1f3/Amon/tas/gn/v20230627/tas_Amon_HadGEM3-GC31-LL_historical_r59i1p1f3_gn_195001-201412.nc' 'SHA256' '6c7dffa837585b795cc0c6d70d1f0a38ae0d80690f95941679ea46d00a812dbd'
'tas_Amon_HadGEM3-GC31-LL_historical_r5i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r5i1p1f3/Amon/tas/gn/v20210315/tas_Amon_HadGEM3-GC31-LL_historical_r5i1p1f3_gn_185001-194912.nc' 'SHA256' 'e8fc7968a2341bd8da377075319848ceff440e7a8f6d44c36d3c5df55a0b2da4'
'tas_Amon_HadGEM3-GC31-LL_historical_r5i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r5i1p1f3/Amon/tas/gn/v20210315/tas_Amon_HadGEM3-GC31-LL_historical_r5i1p1f3_gn_195001-201412.nc' 'SHA256' '97e8ee8fd0bded311a45c9c31004e742e969bb1834dcfe905e833fdb7762cdbb'
'tas_Amon_HadGEM3-GC31-LL_historical_r60i1p1f3_gn_185001-194912.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r60i1p1f3/Amon/tas/gn/v20230618/tas_Amon_HadGEM3-GC31-LL_historical_r60i1p1f3_gn_185001-194912.nc' 'SHA256' '2ed3c13206cf283f0d29436143e98c58edf63d1ad5528ac4dd98f4c244fcb9f8'
'tas_Amon_HadGEM3-GC31-LL_historical_r60i1p1f3_gn_195001-201412.nc' 'https://esgf.ceda.ac.uk/thredds/fileServer/esg_cmip6/CMIP6/CMIP/MOHC/HadGEM3-GC31-LL/historical/r60i1p1f3/Amon/tas/gn/v20230618/tas_Amon_HadGEM3-GC31-LL_historical_r60i1p1f3_gn_195001-201412.nc' 'SHA256' '2658fd4d7891f60375542f33f71e75bc5573db2117c49b5361aa4cf45a6dd3b8'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 110 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
